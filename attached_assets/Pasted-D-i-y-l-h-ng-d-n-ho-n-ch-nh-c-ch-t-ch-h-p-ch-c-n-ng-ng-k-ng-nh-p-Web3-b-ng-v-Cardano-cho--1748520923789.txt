D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n ho√†n ch·ªânh c√°ch t√≠ch h·ª£p ch·ª©c nƒÉng ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p Web3 b·∫±ng v√≠ Cardano cho m·ªôt dApp s·ª≠ d·ª•ng Flask + WebAssembly (WASM) ƒë·ªÉ x√°c minh ch·ªØ k√Ω:

üß© M·ª•c ti√™u
Cho ph√©p ng∆∞·ªùi d√πng:

K·∫øt n·ªëi v√≠ Cardano (Nami, Eternl, Flint‚Ä¶)

K√Ω m·ªôt th√¥ng ƒëi·ªáp (nonce)

Flask backend x√°c minh ch·ªØ k√Ω b·∫±ng WebAssembly

T·∫°o session/token ‚Üí ng∆∞·ªùi d√πng ƒë∆∞·ª£c xem l√† ƒë√£ ƒëƒÉng nh·∫≠p

üîß Th√†nh ph·∫ßn
Th√†nh ph·∫ßn	C√¥ng ngh·ªá s·ª≠ d·ª•ng
Frontend	HTML + JavaScript (CIP-30 Wallet API)
Backend	Flask (Python)
X√°c minh ch·ªØ k√Ω	WASM module (ch·∫°y b·∫±ng wasmtime trong Flask)

1. üåê Frontend - K·∫øt n·ªëi v√† k√Ω th√¥ng ƒëi·ªáp
html
Copy
Edit
<script>
async function loginWithWallet() {
    const wallet = window.cardano.nami;
    await wallet.enable();
    const addresses = await wallet.getUsedAddresses();
    const addressHex = addresses[0];

    // Get nonce from backend
    const nonceRes = await fetch('/get_nonce', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ address: addressHex })
    });
    const { nonce } = await nonceRes.json();

    // Sign nonce
    const signed = await wallet.signData(addressHex, nonce);

    // Verify with backend
    const verifyRes = await fetch('/verify_signature', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            address: addressHex,
            signature: signed.signature,
            key: signed.key,
            nonce
        })
    });

    const result = await verifyRes.json();
    alert(result.message || result.error);
}
</script>
2. üß† Backend - Flask
Install dependencies
bash
Copy
Edit
pip install flask wasmtime flask-cors
app.py
python
Copy
Edit
from flask import Flask, request, jsonify, session
from flask_cors import CORS
import secrets
import wasmtime

app = Flask(__name__)
CORS(app)
app.secret_key = 'secret'
NONCES = {}

# Load WASM verifier module
store = wasmtime.Store()
module = wasmtime.Module.from_file(store.engine, "verify_signature.wasm")
instance = wasmtime.Instance(store, module, [])
verify_func = instance.exports(store)["verify_signature"]  # assuming the WASM exports this

@app.route("/get_nonce", methods=["POST"])
def get_nonce():
    data = request.get_json()
    address = data["address"]
    nonce = secrets.token_hex(16)
    NONCES[address] = nonce
    return jsonify({"nonce": nonce})

@app.route("/verify_signature", methods=["POST"])
def verify_signature():
    data = request.get_json()
    address = data["address"]
    signature = bytes.fromhex(data["signature"])
    key = bytes.fromhex(data["key"])
    nonce = data["nonce"].encode("utf-8")

    if address not in NONCES:
        return jsonify({"error": "No nonce found"}), 400

    # Call WASM verification (you may need to encode or convert to memory buffer)
    try:
        result = verify_func(key, nonce, signature)
    except Exception as e:
        return jsonify({"error": f"WASM verification failed: {str(e)}"}), 400

    if result:
        session["wallet"] = address
        del NONCES[address]
        return jsonify({"message": "Login successful"})
    else:
        return jsonify({"error": "Invalid signature"}), 401
3. üß™ WASM Module
B·∫°n c√≥ th·ªÉ:
Clone v√† build t·ª´ repo: https://github.com/cardano-foundation/cardano-verify-datasignature

Compile sang .wasm (v·ªõi wasm-pack ho·∫∑c cargo build --target wasm32-wasi)

ƒê·∫£m b·∫£o WASM c√≥ h√†m xu·∫•t: verify_signature(public_key, message, signature): bool

‚úÖ B·∫£o m·∫≠t & l∆∞u √Ω
Nonce n√™n c√≥ th·ªùi h·∫°n s·ªëng ng·∫Øn (v√†i ph√∫t)

S·ª≠ d·ª•ng HTTPS

Flask session n√™n b·∫£o m·∫≠t ho·∫∑c chuy·ªÉn sang JWT n·∫øu c·∫ßn